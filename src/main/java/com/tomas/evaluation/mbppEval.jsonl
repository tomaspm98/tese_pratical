{"text": "Write a function to find the similar elements from the given two tuple lists.", "code": "def similar_elements(test_tup1, test_tup2):\r\n  res = list(set(test_tup1) & set(test_tup2))\r\n  return (res) ", "task_id": 2, "test_setup_code": "", "test_list": ["assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == [4, 5]", "assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == [3, 4]", "assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == [13, 14]"], "challenge_test_list": []}
{"text": "Write a python function to identify non-prime numbers.", "code": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result", "task_id": 3, "test_setup_code": "", "test_list": ["assert is_not_prime(2) == False", "assert is_not_prime(10) == True", "assert is_not_prime(35) == True"], "challenge_test_list": []}
{"text": "Write a function to find squares of individual elements in a list using lambda function.", "code": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums", "task_id": 8, "test_setup_code": "", "test_list": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert square_nums([10,20,30])==[100,400,900]", "assert square_nums([12,15])==[144,225]"], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a triangular prism.", "code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ", "task_id": 14, "test_setup_code": "", "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "task_id": 17, "test_setup_code": "", "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "challenge_test_list": []}
{"text": "Write a function to find the nth octagonal number.", "code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "task_id": 59, "test_setup_code": "", "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "challenge_test_list": []}
{"text": "Write a python function to count number of substrings with the sum of digits equal to their length.", "code": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count", "task_id": 61, "test_setup_code": "", "test_list": ["assert count_Substrings('112112',6) == 6", "assert count_Substrings('111',3) == 6", "assert count_Substrings('1101112',7) == 12"], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist or not.", "code": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set", "task_id": 69, "test_setup_code": "", "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "challenge_test_list": []}
{"text": "Write a function to find whether all the given tuples have equal length or not.", "code": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return True\r\n  else:\r\n    return False", "task_id": 70, "test_setup_code": "", "test_list": ["assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == True", "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == False", "assert get_equal([(1, 2), (3, 4)], 2) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the length of the word is odd or not.", "code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False", "task_id": 79, "test_setup_code": "", "test_list": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "challenge_test_list": []}
{"text": "Write a function to find the nth tetrahedral number.", "code": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6", "task_id": 80, "test_setup_code": "", "test_list": ["assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0"], "challenge_test_list": []}
{"text": "Write a function to find nth centered hexagonal number.", "code": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1", "task_id": 86, "test_setup_code": "", "test_list": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller number than n.", "code": "def closest_num(N):\r\n  return (N - 1)", "task_id": 89, "test_setup_code": "", "test_list": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum length of sublist.", "code": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ", "task_id": 95, "test_setup_code": "", "test_list": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count true booleans in the given list.", "code": "def count(lst):   \r\n    return sum(lst) ", "task_id": 105, "test_setup_code": "", "test_list": ["assert count([True,False,True]) == 2", "assert count([False,False]) == 0", "assert count([True,True,True]) == 3"], "challenge_test_list": []}
{"text": "Write a function to check if a string represents an integer or not.", "code": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False", "task_id": 113, "test_setup_code": "", "test_list": ["assert check_integer(\"python\")==False", "assert check_integer(\"1\")==True", "assert check_integer(\"12345\")==True"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of common divisors of two given numbers.", "code": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum", "task_id": 126, "test_setup_code": "", "test_list": ["assert sum(10,15) == 6", "assert sum(100,150) == 93", "assert sum(4,6) == 3"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "code": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)", "task_id": 133, "test_setup_code": "", "test_list": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "challenge_test_list": []}
{"text": "Write a function to find the nth hexagonal number.", "code": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ", "task_id": 135, "test_setup_code": "", "test_list": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists.", "code": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result", "task_id": 142, "test_setup_code": "", "test_list": ["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "challenge_test_list": []}
{"text": "Write a function to find number of lists present in the given tuple.", "code": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ", "task_id": 143, "test_setup_code": "", "test_list": ["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3", "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum difference between any two elements in a given array.", "code": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ", "task_id": 145, "test_setup_code": "", "test_list": ["assert max_Abs_Diff((2,1,5,3),4) == 4", "assert max_Abs_Diff((9,3,2,5,1),5) == 8", "assert max_Abs_Diff((3,2,1),3) == 2"], "challenge_test_list": []}
{"text": "Write a function to remove all elements from a given list present in another list.", "code": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result", "task_id": 161, "test_setup_code": "", "test_list": ["assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to find sum of the numbers in a list between the indices of a specified range.", "code": "def sum_range_list(list1, m, n): \r\nsum_range = 0 \r\nfor i in range(m, n+1, 1): \r\nsum_range += list1[i] \r\nreturn sum_range", "task_id": 170, "test_setup_code": "", "test_list": ["assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a pentagon.", "code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter", "task_id": 171, "test_setup_code": "", "test_list": ["assert perimeter_pentagon(5)==25", "assert perimeter_pentagon(10)==50", "assert perimeter_pentagon(15)==75"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume", "task_id": 234, "test_setup_code": "", "test_list": ["assert volume_cube(3)==27", "assert volume_cube(2)==8", "assert volume_cube(5)==125"], "challenge_test_list": []}
{"text": "Write a python function to count number of non-empty substrings of a given string.", "code": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ", "task_id": 238, "test_setup_code": "", "test_list": ["assert number_of_substrings(\"abc\") == 6", "assert number_of_substrings(\"abcd\") == 10", "assert number_of_substrings(\"abcde\") == 15"], "challenge_test_list": []}
{"text": "Write a function to replace the last element of the list with another list.", "code": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n", "task_id": 240, "test_setup_code": "", "test_list": ["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "challenge_test_list": []}
{"text": "Write a function to count total characters in a string.", "code": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total", "task_id": 242, "test_setup_code": "", "test_list": ["assert count_charac(\"python programming\")==18", "assert count_charac(\"language\")==8", "assert count_charac(\"words\")==5"], "challenge_test_list": []}
{"text": "Write a function to find the intersection of two arrays using lambda function.", "code": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result", "task_id": 249, "test_setup_code": "", "test_list": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "challenge_test_list": []}
{"text": "Write a function to insert an element before each element of a list.", "code": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list", "task_id": 251, "test_setup_code": "", "test_list": ["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ", "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ", "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "], "challenge_test_list": []}
{"text": "Write a function to swap two numbers.", "code": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)", "task_id": 257, "test_setup_code": "", "test_list": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "challenge_test_list": []}
{"text": "Write a function to perform mathematical division operation across the given tuples.", "code": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 261, "test_setup_code": "", "test_list": ["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the length of the first part of the list is given.", "code": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]", "task_id": 262, "test_setup_code": "", "test_list": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "challenge_test_list": []}
{"text": "Write a function to calculate a dog's age in dog's years.", "code": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age", "task_id": 264, "test_setup_code": "", "test_list": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109"], "challenge_test_list": []}
{"text": "Write a function to find the lateral surface area of a cube.", "code": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA", "task_id": 266, "test_setup_code": "", "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400"], "challenge_test_list": []}
{"text": "Write a function to find the n'th star number.", "code": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ", "task_id": 268, "test_setup_code": "", "test_list": ["assert find_star_num(3) == 37", "assert find_star_num(4) == 73", "assert find_star_num(5) == 121"], "challenge_test_list": []}
{"text": "Write a function to find the ascii value of a character.", "code": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)", "task_id": 269, "test_setup_code": "", "test_list": ["assert ascii_value('A')==65", "assert ascii_value('R')==82", "assert ascii_value('S')==83"], "challenge_test_list": []}
{"text": "Write a function to substract the contents of one list with corresponding index of other list.", "code": "def substract_elements(test_tup1, test_tup2):\r\n  res = list(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ", "task_id": 273, "test_setup_code": "", "test_list": ["assert substract_elements([10, 4, 5], [2, 5, 18]) == [8, -1, -13]", "assert substract_elements([11, 2, 3], [24, 45 ,16]) == [-13, -43, -13]", "assert substract_elements([7, 18, 9], [10, 11, 12]) == [-3, 7, -3]"], "challenge_test_list": []}
{"text": "Write a function to find the nth decagonal number.", "code": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ", "task_id": 279, "test_setup_code": "", "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "challenge_test_list": []}
{"text": "Write a function to substaract two lists using map and lambda function.", "code": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)", "task_id": 282, "test_setup_code": "", "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "challenge_test_list": []}
{"text": "Write a function to check whether all items of a list are equal to a given string.", "code": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element", "task_id": 284, "test_setup_code": "", "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with maximum length.", "code": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return max_list", "task_id": 290, "test_setup_code": "", "test_list": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==[13, 15, 17]", "assert max_length([[1], [5, 7], [10, 12, 14,15]])==[10, 12, 14,15]", "assert max_length([[5], [15,20,25]])==[15,20,25]"], "challenge_test_list": []}
{"text": "Write a python function to find quotient of two numbers.", "code": "def find(n,m):  \r\n    q = n//m \r\n    return (q)", "task_id": 292, "test_setup_code": "", "test_list": ["assert find(10,3) == 3", "assert find(4,2) == 2", "assert find(20,5) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find element at a given index after number of rotations.", "code": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ", "task_id": 304, "test_setup_code": "", "test_list": ["assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3", "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum of two numbers.", "code": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ", "task_id": 309, "test_setup_code": "", "test_list": ["assert maximum(5,10) == 10", "assert maximum(-1,-2) == -1", "assert maximum(9,7) == 9"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a list.", "code": "def string_to_tuple(str1):\r\n    result = list(x for x in str1 if not x.isspace()) \r\n    return result", "task_id": 310, "test_setup_code": "", "test_list": ["assert string_to_tuple(\"python 3.0\")==['p', 'y', 't', 'h', 'o', 'n', '3', '.', '0']", "assert string_to_tuple(\"item1\")==['i', 't', 'e', 'm', '1']", "assert string_to_tuple(\"15.10\")==['1', '5', '.', '1', '0']"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with the same character or not using regex.", "code": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ", "task_id": 396, "test_setup_code": "", "test_list": ["assert check_char(\"abba\") == \"Valid\"", "assert check_char(\"a\") == \"Valid\"", "assert check_char(\"abcd\") == \"Invalid\""], "challenge_test_list": []}
{"text": "Write a function to find the median of three specific numbers.", "code": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median", "task_id": 397, "test_setup_code": "", "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0"], "challenge_test_list": []}
{"text": "Write a python function to find the parity of a given number.", "code": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return True; \r\n    return False; ", "task_id": 406, "test_setup_code": "", "test_list": ["assert find_Parity(12) == False", "assert find_Parity(7) == True", "assert find_Parity(10) == False"], "challenge_test_list": []}
{"text": "Write a python function to remove odd numbers from a given list.", "code": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l", "task_id": 412, "test_setup_code": "", "test_list": ["assert remove_odd([1,2,3]) == [2]", "assert remove_odd([2,4,6]) == [2,4,6]", "assert remove_odd([10,20,3]) == [10,20]"], "challenge_test_list": []}
{"text": "Write a python function to check whether the value exists in a sequence or not.", "code": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0", "task_id": 414, "test_setup_code": "", "test_list": ["assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "assert overlapping([1,2,3],[4,5,6]) == False", "assert overlapping([1,4,5],[1,4,5]) == True"], "challenge_test_list": []}
{"text": "Write a function to extract only the rear index element of each string in the given tuple.", "code": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ", "task_id": 424, "test_setup_code": "", "test_list": ["assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']", "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"], "challenge_test_list": []}
{"text": "Write a function to filter odd numbers using lambda function.", "code": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums", "task_id": 426, "test_setup_code": "", "test_list": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]", "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"], "challenge_test_list": []}
{"text": "Write a function to find the median of a trapezium.", "code": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median", "task_id": 432, "test_setup_code": "", "test_list": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5"], "challenge_test_list": []}
{"text": "Write a python function to print negative numbers in a list.", "code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ", "task_id": 436, "test_setup_code": "", "test_list": ["assert neg_nos([-1,4,5,-6]) == [-1,-6]", "assert neg_nos([-1,-2,3,4]) == [-1,-2]", "assert neg_nos([-7,-6,8,9]) == [-7,-6]"], "challenge_test_list": []}
{"text": "Write a function that gives loss amount if the given amount has loss else return none.", "code": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None", "task_id": 452, "test_setup_code": "", "test_list": ["assert loss_amount(1500,1200)==None", "assert loss_amount(100,200)==100", "assert loss_amount(2000,5000)==3000"], "challenge_test_list": []}
{"text": "Write a function to check whether the given month number contains 31 days or not.", "code": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False", "task_id": 455, "test_setup_code": "", "test_list": ["assert check_monthnumb_number(5)==True", "assert check_monthnumb_number(2)==False", "assert check_monthnumb_number(6)==False"], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having minimum length.", "code": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList", "task_id": 457, "test_setup_code": "", "test_list": ["assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]", "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area", "task_id": 458, "test_setup_code": "", "test_list": ["assert rectangle_area(10,20)==200", "assert rectangle_area(10,5)==50", "assert rectangle_area(4,2)==8"], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist.", "code": "def Extract(lst): \r\n    return [item[0] for item in lst] ", "task_id": 460, "test_setup_code": "", "test_list": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]"], "challenge_test_list": []}
{"text": "Write a python function to count the upper case characters in a given string.", "code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr", "task_id": 461, "test_setup_code": "", "test_list": ["assert upper_ctr('PYthon') == 1", "assert upper_ctr('BigData') == 1", "assert upper_ctr('program') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the pairwise addition of the elements of the given lists.", "code": "def add_pairwise(test_tup):\r\n  res = list(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "task_id": 470, "test_setup_code": "", "test_list": ["assert add_pairwise([1, 5, 7, 8, 10]) == [6, 12, 15, 18]", "assert add_pairwise([2, 6, 8, 9, 11]) == [8, 14, 17, 20]", "assert add_pairwise([3, 7, 9, 10, 12]) == [10, 16, 19, 22]"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the largest and smallest value in a given array.", "code": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum", "task_id": 476, "test_setup_code": "", "test_list": ["assert big_sum([1,2,3]) == 4", "assert big_sum([-1,2,3,4]) == 3", "assert big_sum([2,3,6]) == 8"], "challenge_test_list": []}
{"text": "Write a python function to find odd numbers from a mixed list.", "code": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li", "task_id": 554, "test_setup_code": "", "test_list": ["assert Split([1,2,3,4,5,6]) == [1,3,5]", "assert Split([10,11,12,13]) == [11,13]", "assert Split([7,8,9,1]) == [7,9,1]"], "challenge_test_list": []}
{"text": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.", "code": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ", "task_id": 555, "test_setup_code": "", "test_list": ["assert difference(3) == 30", "assert difference(5) == 210", "assert difference(2) == 6"], "challenge_test_list": []}
{"text": "Write a python function to split a string into characters.", "code": "def split(word): \r\n    return [char for char in word] ", "task_id": 565, "test_setup_code": "", "test_list": ["assert split('python') == ['p','y','t','h','o','n']", "assert split('Name') == ['N','a','m','e']", "assert split('program') == ['p','r','o','g','r','a','m']"], "challenge_test_list": []}
{"text": "Write a python function to remove two duplicate numbers from a given number of lists.", "code": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]", "task_id": 572, "test_setup_code": "", "test_list": ["assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a python function to find the last digit in factorial of a given number.", "code": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0", "task_id": 577, "test_setup_code": "", "test_list": ["assert last_Digit_Factorial(4) == 4", "assert last_Digit_Factorial(21) == 0", "assert last_Digit_Factorial(30) == 0"], "challenge_test_list": []}
{"text": "Write a function to interleave lists of the same length.", "code": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result", "task_id": 578, "test_setup_code": "", "test_list": ["assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]", "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of the square pyramid.", "code": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ", "task_id": 581, "test_setup_code": "", "test_list": ["assert surface_Area(3,4) == 33", "assert surface_Area(4,5) == 56", "assert surface_Area(1,2) == 5"], "challenge_test_list": []}
{"text": "Write a python function to split the array and add the first part to the end.", "code": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ", "task_id": 586, "test_setup_code": "", "test_list": ["assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]", "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]", "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is armstrong or not.", "code": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False", "task_id": 598, "test_setup_code": "", "test_list": ["assert armstrong_number(153)==True", "assert armstrong_number(259)==False", "assert armstrong_number(4458)==False"], "challenge_test_list": []}
{"text": "Write a function to get a lucid number smaller than or equal to n.", "code": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics", "task_id": 603, "test_setup_code": "", "test_list": ["assert get_ludic(10) == [1, 2, 3, 5, 7]", "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]", "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"], "challenge_test_list": []}
{"text": "Write a function to divide two lists using map and lambda function.", "code": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)", "task_id": 618, "test_setup_code": "", "test_list": ["assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "assert div_list([3,2],[1,4])==[3.0, 0.5]", "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"], "challenge_test_list": []}
{"text": "Write a function to find the median of two sorted arrays of same size.", "code": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2", "task_id": 622, "test_setup_code": "", "test_list": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5", "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"], "challenge_test_list": []}
{"text": "Write a function to find the n-th power of individual elements in a list using lambda function.", "code": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums", "task_id": 623, "test_setup_code": "", "test_list": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])", "assert nth_nums([12,15],5)==([248832, 759375])"], "challenge_test_list": []}
{"text": "Write a python function to find the largest triangle that can be inscribed in the semicircle.", "code": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ", "task_id": 626, "test_setup_code": "", "test_list": ["assert triangle_area(0) == 0", "assert triangle_area(-1) == -1", "assert triangle_area(2) == 4"], "challenge_test_list": []}
{"text": "Write a function to check whether the given amount has no profit and no loss", "code": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False", "task_id": 637, "test_setup_code": "", "test_list": ["assert noprofit_noloss(1500,1200)==False", "assert noprofit_noloss(100,100)==True", "assert noprofit_noloss(2000,5000)==False"], "challenge_test_list": []}
{"text": "Write a function to find the nth nonagonal number.", "code": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ", "task_id": 641, "test_setup_code": "", "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089"], "challenge_test_list": []}
{"text": "Write a function to sum elements in two lists.", "code": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list", "task_id": 728, "test_setup_code": "", "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents min heap or not.", "code": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child", "task_id": 751, "test_setup_code": "", "test_list": ["assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True", "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True", "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given month number contains 30 days or not.", "code": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False", "task_id": 762, "test_setup_code": "", "test_list": ["assert check_monthnumber_number(6)==True", "assert check_monthnumber_number(2)==False", "assert check_monthnumber_number(12)==False"], "challenge_test_list": []}
{"text": "Write a python function to get the difference between two lists.", "code": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ", "task_id": 769, "test_setup_code": "", "test_list": ["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]", "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains even numbers of a given list.", "code": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "task_id": 790, "test_setup_code": "", "test_list": ["assert even_position([3,2,1]) == False", "assert even_position([1,2,3]) == False", "assert even_position([2,1,4]) == True"], "challenge_test_list": []}
{"text": "Write a python function to count the number of lists in a given number of lists.", "code": "def count_list(input_list): \r\n    return len(input_list)", "task_id": 792, "test_setup_code": "", "test_list": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "assert count_list([[1,2],[2,3],[4,5]]) == 3", "assert count_list([[1,0],[2,0]]) == 2"], "challenge_test_list": []}
{"text": "Write a python function to count the number of equal numbers from three given integers.", "code": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))", "task_id": 801, "test_setup_code": "", "test_list": ["assert test_three_equal(1,1,1) == 3", "assert test_three_equal(-1,-2,-3) == 0", "assert test_three_equal(1,2,2) == 2"], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of numbers is even or not.", "code": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "task_id": 804, "test_setup_code": "", "test_list": ["assert is_Product_Even([1,2,3],3) == True", "assert is_Product_Even([1,2,1,4],4) == True", "assert is_Product_Even([1,1],2) == False"], "challenge_test_list": []}
{"text": "Write a function to check if the given tuples contain the k or not.", "code": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "task_id": 808, "test_setup_code": "", "test_list": ["assert check_K((10, 4, 5, 6, 8), 6) == True", "assert check_K((1, 2, 3, 4, 5, 6), 7) == False", "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"], "challenge_test_list": []}
{"text": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "code": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "task_id": 809, "test_setup_code": "", "test_list": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "assert check_smaller((4, 5, 6), (3, 4, 5)) == True", "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"], "challenge_test_list": []}